
#include <opendnp3/DNP3Manager.h>
#include <opendnp3/SlaveStackConfig.h>
#include <opendnp3/IChannel.h>
#include <opendnp3/IOutstation.h>

#include "PifaceIOHandler.h"
#include <sqlite3.h>
#include <thread>
#include <chrono>


#include <string.h>
#include <iostream>

#include <stdio.h>
#include <stdlib.h>


using namespace std;
using namespace opendnp3;

DNP3Manager mgr(1);
int tmp=0;
const FilterLevel LOG_LEVEL = LEV_EVENT;
int dev[]={0,0,0,0,0};

SerialSettings sset;
SlaveStackConfig stackConfig;

struct ether{
  int port;
	char *iface;
};

ether e_thr;

 int serial_cb(void *data, int argc, char **argv, char **azColName){
   if (strcmp(argv[0],"serial")==0){
	   tmp=1;}
	   else if (strcmp(argv[0],"eth")==0) {
		   tmp=2;
	   }
   return 0;
	}

 int s_config(void *data, int argc, char **argv, char **azColName){
	 //SELECT port,br,parity,bitstop,flow from serial
	 sset.mDevice=argv[0];
	 sset.mBaud=atoi(argv[1]);
	 //sset.mParity=atoi(argv[3]);
	 sset.mStopBits=atoi(argv[4]);

	 return 0;
 }

 int e_config(void *data, int argc, char **argv, char **azColName){
	 e_thr.port=atoi(argv[1]);
	 e_thr.iface=*argv;
	 return 0;
  }

 int device(void *data, int argc, char **argv, char **azColName){
	 int i;
	 for (i=0;i<argc;i++) dev[i]=atoi(argv[i]);
	 return 0;
  }

 int dnp_address(void *data, int argc, char **argv, char **azColName){
 	 stackConfig.link.RemoteAddr=atoi(argv[0]);
 	 stackConfig.link.LocalAddr=atoi(argv[1]);
 	 return 0;
   }

int main(int argc, char* argv[])
{
	PifaceIOHandler ioHandler; // handles control request, input polling, and measurement tracking/updates

	char *sql;
	sqlite3 *db;
	int dbf;
	const char* data = "Callback function called";
	char *zErrMsg = 0;




	//SQLITE3 dnp3 congiguration read

	dbf=sqlite3_open("/OPC/db/dnp3.db",&db);
	if (dbf) {
		fprintf(stderr,"Blad otwarcia konfiguracji: %s\n",sqlite3_errmsg(db));
		exit(0);
	}

	sql="SELECT typ from transport;";
	dbf=sqlite3_exec(db,sql,serial_cb,(void*)data,&zErrMsg);
	fprintf(stderr,"DANE: %d\n",tmp);
	sql="SELECT * from device;";
	dbf=sqlite3_exec(db,sql,device,(void*)data,&zErrMsg);
	sql="SELECT * from dnpaddr;";
	dbf=sqlite3_exec(db,sql,dnp_address,(void*)data,&zErrMsg);
	if (tmp==2){
	sql="SELECT * from eth;";
	dbf=sqlite3_exec(db,sql,e_config,(void*)data,&zErrMsg);
	DeviceTemplate device(dev[0],dev[1], dev[2], dev[3], dev[4]);
	stackConfig.device = device;

	auto pServer = mgr.AddTCPServer("tcpserver", LOG_LEVEL, 5000, "0.0.0.0", 20000);
	auto pOutstation = pServer->AddOutstation("outstation", LOG_LEVEL, &ioHandler, stackConfig);
	auto pDataObserver = pOutstation->GetDataObserver();

	do {


			ioHandler.ReadMeasurements(pDataObserver);
			//this_thread::sleep_for( chrono::milliseconds(6000) );
		}
		while(true);

	}else if (tmp==1)
	{
		sql="SELECT port,br,parity,bitstop,flow from serial;";
		dbf=sqlite3_exec(db,sql,s_config,(void*)data,&zErrMsg);


		auto pServer = mgr.AddSerial("serial", LOG_LEVEL,5000,sset);
		auto pOutstation = pServer->AddOutstation("outstation", LOG_LEVEL, &ioHandler, stackConfig);
		auto pDataObserver = pOutstation->GetDataObserver();

		do {


				ioHandler.ReadMeasurements(pDataObserver);
				//this_thread::sleep_for( chrono::milliseconds(100) );
			}
			while(true);

	} else if (tmp==0)
	{
		return 0;}


	// just to be interesting, send timestamped binary events by default
	//stackConfig.slave.mEventBinary = EBR_GROUP2_VAR2;




	return 0;
}
