#include "PifaceIOHandler.h"
#include <sys/socket.h>
#include <sys/un.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string>
#include <iostream>

#include <iostream>
#include <chrono>
#include <opendnp3/AnalogOutput.h>

using namespace std;
using namespace opendnp3;


float PifaceIOHandler::getval(char *b) {
    int p=0;
    string s=string(b);
    p=s.find('=');
    //p2=s.find('.');
    //if p2 {
      s=s.substr(p+1);
    return atof( s.c_str() );
    }

int PifaceIOHandler::getr(char *b) {
    int p=0;
    string s=string(b);
    p=s.find('=');
    s=s.substr(0,p);
    //return stoi(s);
    return atoi( s.c_str() );
    }
int PifaceIOHandler::valid(char *b,IDataObserver* apObserver) {
	int p=0;
	int k=0;
	string s2;
	string s=string(b);
    do {
    	k=s.find('|');
		s2=s.substr(0,k);
		char *cstr = new char[s2.length() + 1];
		strcpy(cstr, s2.c_str());
		if(rejestr[getr(cstr)]!=getval(cstr)){
			Transaction t(apObserver);
			apObserver->Update(Analog(getval(cstr)),getr(cstr));
		}

		rejestr[getr(cstr)]=getval(cstr);


    	s=s.substr(k+1);
    	p=k;
    }while(k!=-1);
return 0;

    }



void PifaceIOHandler::DoOperate(const AnalogOutputInt16& arCommand, char aIndex)
{
	char *wte;
	wte="DoOperate";
	//pfio_digital_write(aIndex, value);
	//to dzia≈Ça przy selectandoperate
	write(cl,wte,sizeof(wte));
}

CommandStatus PifaceIOHandler::ValidateCROB(const opendnp3::ControlRelayOutputBlock& arCommand, size_t aIndex)
{
	if(aIndex < 8) {
		if(arCommand.GetCode() == CC_LATCH_ON || arCommand.GetCode() == CC_LATCH_OFF) return CS_SUCCESS;
		else return CS_NOT_SUPPORTED;
	}
	else return CS_NOT_SUPPORTED;
}

bool PifaceIOHandler::isSwitchOn(int data, int num)
{
	int mask = 1 << num; // 255 is all off, switch 0 is lowest bit
	bool ret = ((data & mask) == 0);
	return ret;
}


PifaceIOHandler::PifaceIOHandler() : lastData(0)
{
	char *socket_path = "./socket";
 int i;

		  if ( (fd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {
		    perror("socket error");
		    exit(-1);
		  }
		  struct sockaddr_un addr;
		  memset(&addr, 0, sizeof(addr));
		  addr.sun_family = AF_UNIX;
		  strncpy(addr.sun_path, socket_path, sizeof(addr.sun_path)-1);

		  unlink(socket_path);

		  if (bind(fd, (struct sockaddr*)&addr, sizeof(addr)) == -1) {
		    perror("bind error");
		    exit(-1);
		  }

		  if (listen(fd, 5) == -1) {
		    perror("listen error");
		    exit(-1);
		  }
		  for(i=0;i<32;i++) rejestr[i]=0;

}

PifaceIOHandler::~PifaceIOHandler()
{
	//pfio_deinit();
	unlink(socket_path);
}

void PifaceIOHandler::ReadMeasurements(IDataObserver* apObserver)
{
char *buf2;
string b;
int i=0;
char buf[200];
//=(char*)malloc(sizeof(char) * 200);;

	if ( (cl = accept(fd, NULL, NULL)) == -1) {
	      perror("accept error");
	    }
	//buf=(char *)malloc(20);
	for(i=0;i<201;i++) buf[i]=' ';
	    while ( (rc=read(cl,buf,sizeof(buf))) > 0) {

	    	//pos=buf.find('=');

	   if (1){


		 // printf("%s\n",buf);

	     printf("buf. \n");
	      valid(buf,apObserver);

	      for(i=0;i<201;i++) buf[i]=' ';
	      buf2="RECV:\n";
	      //write(cl,buf2,sizeof(buf2));
	     }
	    }



	    if (rc == -1) {
	      perror("read");
	      exit(-1);
	    }
	    else if (rc == 0) {
	      printf("EOF\n");
	      close(cl);
	    }
}

CommandStatus PifaceIOHandler::Select(const AnalogOutputInt16& arCommand, size_t aIndex)
{
	printf( "wybrano zmienna");
	return CS_SUCCESS;

}



CommandStatus PifaceIOHandler::Operate(const AnalogOutputInt16& arCommand, size_t aIndex)
{
	int val = arCommand.GetValue();
	char *c=(char*)malloc(sizeof(char) * 20);

	sprintf(c,"%d=%d",aIndex,val);
	 write(cl,c,sizeof(c));
	 printf( "wybrano zmienna");
	 	return CS_SUCCESS;
}
CommandStatus PifaceIOHandler::Select(const AnalogOutputInt32& arCommand, size_t aIndex)
{
	printf( "wybrano zmienna");
	return CS_SUCCESS;

}



CommandStatus PifaceIOHandler::Operate(const AnalogOutputInt32& arCommand, size_t aIndex)
{
	int val = arCommand.GetValue();
	char *c=(char*)malloc(sizeof(char) * 20);

	sprintf(c,"%d=%d",aIndex,val);
	 write(cl,c,sizeof(c));
	 printf( "wybrano zmienna");
	 	return CS_SUCCESS;
}

CommandStatus PifaceIOHandler::Select(const AnalogOutputFloat32& arCommand, size_t aIndex)
{
	printf( "wybrano zmienna");
	return CS_SUCCESS;

}

CommandStatus PifaceIOHandler::Operate(const AnalogOutputDouble64& arCommand, size_t aIndex)
{
	int val = arCommand.GetValue();
	char *c=(char*)malloc(sizeof(char) * 20);

	sprintf(c,"%d=%d",aIndex,val);
	 write(cl,c,sizeof(c));
	 printf( "wybrano zmienna");
	 	return CS_SUCCESS;
}

CommandStatus PifaceIOHandler::Select(const AnalogOutputDouble64& arCommand, size_t aIndex)
{
	printf( "wybrano zmienna");
	return CS_SUCCESS;

}


CommandStatus PifaceIOHandler::Operate(const AnalogOutputFloat32& arCommand, size_t aIndex)
{
	int val = arCommand.GetValue();
	char *c=(char*)malloc(sizeof(char) * 20);

	sprintf(c,"%d=%d",aIndex,val);
	 write(cl,c,sizeof(c));
	 printf( "wybrano zmienna");
	 	return CS_SUCCESS;
}

CommandStatus PifaceIOHandler::Select(const ControlRelayOutputBlock& arCommand, size_t aIndex)
{
	printf( "wybrano zmienna");
	return CS_SUCCESS;

}


CommandStatus PifaceIOHandler::Operate(const ControlRelayOutputBlock& arCommand, size_t aIndex)
{

	char *c=(char*)malloc(sizeof(char) * 20);


	 printf( "wybrano zmienna");
	 	return CS_SUCCESS;
}

CommandStatus PifaceIOHandler::DirectOperate(const AnalogOutputInt16& arCommand, size_t aIndex)
{
	printf( "direct operate przekaznik");
//to tez dziala

 DoOperate(arCommand, static_cast<char>(aIndex));
 return CS_SUCCESS;
}
